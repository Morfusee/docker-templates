services:
  # To prevent mounting docker.sock, which is a security risk
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    environment:
      CONTAINERS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - socket-proxy-network

  reverse-proxy:
    image: traefik:latest
    command:
      - "--configFile=/etc/traefik/config/static.yml"
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./letsencrypt:/letsencrypt:rw # letsencrypt folder
      - ./traefik/config:/etc/traefik/config:ro # traefik folder
      - ./traefik/logs:/logs # traefik folder
    restart: always
    networks:
      - main-network
      - adonisjs-network
      - socket-proxy-network
    depends_on:
      - socket-proxy

  mongo:
    image: mongo:latest
    restart: always
    env_file:
      - ../.env
    volumes:
      - ./database/mongodb-data:/data/db
      - ./database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - db-network

  # Replace this with any backend service you like.
  # Don't forget tochange the BASE_URL_FQDN_API as well
  adonisjs:
    image: ghcr.io/morfusee/brainbytes-backend:latest
    environment:
      IS_DOCKERIZED: true
    env_file:
      - ../.env
    restart: always
    depends_on:
      - mongo
    networks:
      - db-network
      - main-network
      - adonisjs-network
    labels:
      # Since you have two replicas, you can't put all of these inside dynamic.yml :(
      # Enable Traefik for this service
      - "traefik.enable=true"

      # Router Configuration
      - "traefik.http.routers.adonisjs.rule=Host(`${BASE_URL_FQDN_API}`)"
      - "traefik.http.routers.adonisjs.entrypoints=websecure"
      - "traefik.http.routers.adonisjs.middlewares=cors,security,block-sensitive"
      - "traefik.http.routers.adonisjs.tls.certresolver=tlsresolver"

      # TLS Configuration
      - "traefik.tls.options.default.minVersion=VersionTLS12"
      - "traefik.tls.options.default.sniStrict=true"
      - "traefik.tls.options.default.cipherSuites=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
      - "traefik.tls.options.default.curvePreferences=CurveP521,CurveP384"

      # Middleware: CORS Headers
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PATCH,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=${FRONTEND_URL}"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"

      # Middleware: Security Headers
      - "traefik.http.middlewares.security.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security.headers.stsPreload=true"
      - "traefik.http.middlewares.security.headers.frameDeny=true"

      # Middleware: Block Sensitive Files
      - "traefik.http.middlewares.block-sensitive.redirectregex.regex=^.*(\\.env|\\.git|docker-compose\\.yml|\\.htaccess|\\.htpasswd|config\\.json).*$"
      - "traefik.http.middlewares.block-sensitive.redirectregex.replacement=https://www.youtube.com/watch?v=xvFZjo5PgG0"
      - "traefik.http.middlewares.block-sensitive.redirectregex.permanent=true"

      # Auto update image
      - "com.centurylinklabs.watchtower.enable=true"

  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    environment:
      WATCHTOWER_CLEANUP: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

networks:
  adonisjs-network: # you actually need this for discoverability of the backend
    driver: bridge
  db-network:
    driver: bridge
  socket-proxy-network:
    driver: bridge
  main-network:
    driver: bridge

# If you need monitoring for this as well, the compose.monitor can be upped if
# you just expose main-network by doing external: true.
# That compose is plug and play.
